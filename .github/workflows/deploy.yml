name: Deploy to GitHub Pages (Force No Jekyll)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
  schedule:
    # Run once daily to ensure deployment
    - cron: '0 0 * * *'

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify no Jekyll processing
        run: |
          echo "Verifying .nojekyll file exists..."
          if [ ! -f ".nojekyll" ]; then
            echo "Creating .nojekyll file"
            touch .nojekyll
          fi
          echo "‚úÖ Jekyll processing disabled"
          
      - name: Clean any Jekyll artifacts
        run: |
          rm -rf _site
          rm -f _config.yml
          rm -f Gemfile*
          echo "‚úÖ Jekyll artifacts cleaned"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          echo "üì¶ Installing dependencies (including devDependencies for build)..."
          npm ci
          echo "‚úÖ Dependencies installed"

      - name: Build frontend (Vite)
        run: |
          cd frontend
          echo "üî® Building with Vite..."
          npx vite build
          echo "‚úÖ Build completed"
          echo "Build contents:"
          ls -la dist/
        env:
          NODE_ENV: production

      - name: Prepare deployment files
        run: |
          cd frontend
          echo "üìÅ Preparing deployment files..."
          # Ensure .nojekyll exists in build output
          cp ../.nojekyll dist/.nojekyll
          # Copy files from public directory if they exist
          if [ -d "public" ]; then
            echo "üì¶ Copying public directory files..."
            cp -r public/* dist/ 2>/dev/null || echo "No files to copy from public directory"
          fi
          # Create default 404.html for SPA support if it doesn't exist
          if [ ! -f "dist/404.html" ]; then
            echo "‚ö†Ô∏è Creating default 404.html for SPA routing"
            echo '<!DOCTYPE html><html><head><meta charset="UTF-8"><title>Runway by yogesh</title><script>var pathSegmentsToKeep=1;var l=window.location;l.replace(l.protocol+"//"+l.hostname+(l.port?":"+l.port:"")+l.pathname.split("/").slice(0,1+pathSegmentsToKeep).join("/")+"/?/"+l.pathname.slice(1).split("/").slice(pathSegmentsToKeep).join("/").replace(/&/g,"~and~")+(l.search?"&"+l.search.slice(1).replace(/&/g,"~and~"):"")+l.hash);</script></head><body><p style="display:none;">Golden Elegance - Luxury Ethnic Wear for Women and Kids. Curating elegant ethnic wear with a golden touch. Shop our premium collection of sarees, lehengas, kurtas, and kids wear. Free shipping on orders above ‚Çπ999. Easy returns. Premium quality guaranteed.</p></body></html>' > dist/404.html
          fi
          echo "‚úÖ Deployment files prepared"
          echo "üìã Final dist contents:"
          ls -la dist/
          
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: frontend/dist

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4